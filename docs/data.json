{
    "project": {
        "name": "english-io"
    },
    "files": {
        "src/util/parseNounPhrase.js": {
            "name": "src/util/parseNounPhrase.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/util/parseQuantifier.js": {
            "name": "src/util/parseQuantifier.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/util/plural.js": {
            "name": "src/util/plural.js",
            "modules": {},
            "classes": {
                "plural": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/DescriptionContext.js": {
            "name": "src/DescriptionContext.js",
            "modules": {},
            "classes": {
                "DescriptionContext": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Entity.js": {
            "name": "src/Entity.js",
            "modules": {},
            "classes": {
                "Entity": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/FactListener.js": {
            "name": "src/FactListener.js",
            "modules": {},
            "classes": {
                "FactListener": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/NounPhraseSentence.js": {
            "name": "src/NounPhraseSentence.js",
            "modules": {},
            "classes": {
                "NounPhraseSentence": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Predicate.js": {
            "name": "src/Predicate.js",
            "modules": {},
            "classes": {
                "Predicate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/PredicateSet.js": {
            "name": "src/PredicateSet.js",
            "modules": {},
            "classes": {
                "PredicateSet": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/PredicateSyntax.js": {
            "name": "src/PredicateSyntax.js",
            "modules": {},
            "classes": {
                "PredicateSyntax": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/Sentence.js": {
            "name": "src/Sentence.js",
            "modules": {},
            "classes": {
                "Sentence": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/SentenceQueue.js": {
            "name": "src/SentenceQueue.js",
            "modules": {},
            "classes": {
                "SentenceQueue": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/TimedPredicate.js": {
            "name": "src/TimedPredicate.js",
            "modules": {},
            "classes": {
                "TimedPredicate": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/WanderingDescriber.js": {
            "name": "src/WanderingDescriber.js",
            "modules": {},
            "classes": {
                "WanderingDescriber": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "src/index.js": {
            "name": "src/index.js",
            "modules": {
                "entity-game": 1
            },
            "classes": {},
            "fors": {},
            "namespaces": {}
        },
        "src/spawn2.js": {
            "name": "src/spawn2.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {
        "entity-game": {
            "name": "entity-game",
            "submodules": {},
            "elements": {},
            "classes": {
                "plural": 1,
                "DescriptionContext": 1,
                "Entity": 1,
                "FactListener": 1,
                "NounPhraseSentence": 1,
                "Predicate": 1,
                "PredicateSet": 1,
                "PredicateSyntax": 1,
                "Sentence": 1,
                "SentenceQueue": 1,
                "TimedPredicate": 1,
                "WanderingDescriber": 1
            },
            "fors": {},
            "namespaces": {},
            "tag": "module",
            "file": "src/WanderingDescriber.js",
            "line": 1
        }
    },
    "classes": {
        "plural": {
            "name": "plural",
            "shortname": "plural",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entity-game",
            "file": "src/util/plural.js",
            "line": 1,
            "description": "Convert english nouns between their singular and plural forms.",
            "static": 1
        },
        "DescriptionContext": {
            "name": "DescriptionContext",
            "shortname": "DescriptionContext",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entity-game",
            "file": "src/DescriptionContext.js",
            "line": 1,
            "description": "A class used to keep track of context specific terms and mention-histories",
            "is_constructor": 1
        },
        "Entity": {
            "name": "Entity",
            "shortname": "Entity",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entity-game",
            "file": "src/Entity.js",
            "line": 17,
            "description": "Entity represents an object in the world. It is half derived from the word\n'noun', half from the word 'entityenon'. Though it fits the definition of\nneither precisely.",
            "extends": "EventEmitter",
            "is_constructor": 1
        },
        "FactListener": {
            "name": "FactListener",
            "shortname": "FactListener",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entity-game",
            "file": "src/FactListener.js",
            "line": 4,
            "description": "The FactListener class is a convenient class for handling event listeners on\nmultiple Entitys at once.",
            "is_constructor": 1,
            "extends": "EventEmitter",
            "params": [
                {
                    "name": "entities",
                    "description": "\n  A list of member entities to add to the new fact listener.",
                    "type": "Entity",
                    "optional": true,
                    "multiple": true
                }
            ]
        },
        "NounPhraseSentence": {
            "name": "NounPhraseSentence",
            "shortname": "NounPhraseSentence",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entity-game",
            "file": "src/NounPhraseSentence.js",
            "line": 1,
            "description": "A subclass of Sentence. This class is used to represent a sentence (predicate\n+ arguments) in the form of a noun. For example, \"the cigarette that he was\nsmoking\".\n\nA NounPhraseSentence can be used as an argument in another sentence.",
            "extends": "Sentence",
            "is_constructor": 1,
            "params": [
                {
                    "name": "mainArgumentIndex",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "predicate",
                    "description": "",
                    "type": "Predicate"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Array"
                }
            ]
        },
        "Predicate": {
            "name": "Predicate",
            "shortname": "Predicate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entity-game",
            "file": "src/Predicate.js",
            "line": 3,
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "Options for constructing the predicate.",
                    "type": "Object",
                    "optional": true,
                    "props": [
                        {
                            "name": "verb",
                            "description": "The verb of the predicate.",
                            "type": "String",
                            "optional": true
                        },
                        {
                            "name": "params",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "forms",
                            "description": "Alternatively multiple syntaxes can be defined using an\n                       array of verb/params/constants objects.",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "skipIf",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "prepare",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "check",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "begin",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "expand",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "until",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "afterwards",
                            "description": "",
                            "type": "Function",
                            "optional": true
                        },
                        {
                            "name": "banal",
                            "description": "",
                            "type": "Boolean",
                            "optional": true,
                            "optdefault": "false"
                        }
                    ]
                }
            ]
        },
        "PredicateSet": {
            "name": "PredicateSet",
            "shortname": "PredicateSet",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entity-game",
            "file": "src/PredicateSet.js",
            "line": 3,
            "description": "A class for handling multiple predicates at once.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "predicates",
                    "description": "Predicates to include in the set.",
                    "type": "Predicate",
                    "optional": true,
                    "multiple": true
                }
            ]
        },
        "PredicateSyntax": {
            "name": "PredicateSyntax",
            "shortname": "PredicateSyntax",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entity-game",
            "file": "src/PredicateSyntax.js",
            "line": 1,
            "description": "A class for representing a single syntactic 'form' of a predicate.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "verb",
                            "description": "",
                            "type": "String"
                        },
                        {
                            "name": "params",
                            "description": "",
                            "type": "Array"
                        },
                        {
                            "name": "constants",
                            "description": "",
                            "type": "Array"
                        },
                        {
                            "name": "presentTenses",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        },
                        {
                            "name": "pastTenses",
                            "description": "",
                            "type": "Array",
                            "optional": true
                        }
                    ]
                }
            ]
        },
        "Sentence": {
            "name": "Sentence",
            "shortname": "Sentence",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entity-game",
            "file": "src/Sentence.js",
            "line": 6,
            "extends": "EventEmitter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "predicate",
                    "description": "",
                    "type": "Predicate"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Array"
                }
            ]
        },
        "SentenceQueue": {
            "name": "SentenceQueue",
            "shortname": "SentenceQueue",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entity-game",
            "file": "src/SentenceQueue.js",
            "line": 5,
            "extends": "EventEmitter",
            "is_constructor": 1,
            "params": [
                {
                    "name": "sentences",
                    "description": "",
                    "type": "Sentence",
                    "multiple": true
                }
            ]
        },
        "TimedPredicate": {
            "name": "TimedPredicate",
            "shortname": "TimedPredicate",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entity-game",
            "file": "src/TimedPredicate.js",
            "line": 4,
            "extends": "Predicate",
            "is_constructor": 1,
            "params": [
                {
                    "name": "options",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "duration",
                            "description": "",
                            "type": "Number"
                        }
                    ]
                }
            ]
        },
        "WanderingDescriber": {
            "name": "WanderingDescriber",
            "shortname": "WanderingDescriber",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "module": "entity-game",
            "file": "src/WanderingDescriber.js",
            "line": 1,
            "description": "A class for generating descriptions by following relationships between\nobjects.",
            "is_constructor": 1,
            "params": [
                {
                    "name": "toLog",
                    "description": "",
                    "type": "Sentence|Entity",
                    "multiple": true
                }
            ]
        }
    },
    "elements": {},
    "classitems": [
        {
            "file": "src/util/parseNounPhrase.js",
            "line": 4,
            "description": "Parse a noun-phrase without embedded sentence clauses. Noun-phrases must be\nin the form: [quantifier] + [...adjectives] + [noun].",
            "itemtype": "method",
            "name": "",
            "class": "plural"
        },
        {
            "file": "src/util/parseNounPhrase.js",
            "line": 83,
            "description": "Calculate a new range which is the intersection of two given ranges.",
            "itemtype": "method",
            "name": "rangeOverlap",
            "params": [
                {
                    "name": "range1",
                    "description": "",
                    "props": [
                        {
                            "name": "min",
                            "description": ""
                        },
                        {
                            "name": "max",
                            "description": ""
                        }
                    ]
                },
                {
                    "name": "range2.min",
                    "description": ""
                },
                {
                    "name": "range2.max",
                    "description": ""
                }
            ],
            "return": {
                "description": "A new range {Min, Max}",
                "type": "Object"
            },
            "class": "plural"
        },
        {
            "file": "src/util/parseQuantifier.js",
            "line": 1,
            "description": "Parse a quantifier word/phrase as a range of possible meanings",
            "itemtype": "method",
            "name": "parseQuantifier",
            "params": [
                {
                    "name": "str",
                    "description": "The quantifier",
                    "type": "String"
                }
            ],
            "return": {
                "description": "{min, max}",
                "type": "Object"
            },
            "class": "plural"
        },
        {
            "file": "src/util/plural.js",
            "line": 7,
            "description": "Convert a singular noun to a plural.",
            "itemtype": "method",
            "name": "toPlural",
            "params": [
                {
                    "name": "singularNoun",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "plural"
        },
        {
            "file": "src/util/plural.js",
            "line": 47,
            "description": "Convert a plural noun to a singular",
            "itemtype": "method",
            "name": "toSingular",
            "params": [
                {
                    "name": "pluralNoun",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "String|null"
            },
            "class": "plural"
        },
        {
            "file": "src/DescriptionContext.js",
            "line": 9,
            "description": "list of recent noun-phrase references to objects.",
            "itemtype": "property",
            "name": "referenceHistory",
            "type": "Array",
            "class": "DescriptionContext"
        },
        {
            "file": "src/DescriptionContext.js",
            "line": 16,
            "itemtype": "property",
            "name": "me",
            "type": "Entity or null",
            "default": "`null`",
            "class": "DescriptionContext"
        },
        {
            "file": "src/DescriptionContext.js",
            "line": 22,
            "itemtype": "property",
            "name": "you",
            "type": "Entity or null",
            "default": "`null`",
            "class": "DescriptionContext"
        },
        {
            "file": "src/DescriptionContext.js",
            "line": 29,
            "description": "log a reference to the history",
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "entity",
                    "description": "",
                    "type": "Entity"
                },
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "DescriptionContext"
        },
        {
            "file": "src/DescriptionContext.js",
            "line": 49,
            "description": "get the pronoun of a given entity with respect to this context",
            "itemtype": "method",
            "name": "getPronounFor",
            "params": [
                {
                    "name": "entity",
                    "description": "",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "\"it\", \"me\", \"you\", \"her\", \"them\" or \"him\"",
                "type": "String"
            },
            "class": "DescriptionContext"
        },
        {
            "file": "src/DescriptionContext.js",
            "line": 70,
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Entity"
            },
            "class": "DescriptionContext"
        },
        {
            "file": "src/Entity.js",
            "line": 26,
            "itemtype": "event",
            "name": "fact",
            "params": [
                {
                    "name": "sentence",
                    "description": "The new fact.",
                    "type": "Sentence"
                }
            ],
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 31,
            "description": "Emitted whenever the object changes location.",
            "itemtype": "event",
            "name": "move",
            "params": [
                {
                    "name": "oldLocation",
                    "description": "",
                    "type": "Entity"
                },
                {
                    "name": "newLocation",
                    "description": "",
                    "type": "Entity"
                },
                {
                    "name": "oldLocationType",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "newLocationType",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 39,
            "description": "Emitter whenever a parent location of the object changes location",
            "itemtype": "event",
            "name": "parentMove",
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 43,
            "itemtype": "event",
            "name": "childEnter",
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 46,
            "itemtype": "event",
            "name": "childExit",
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 50,
            "itemtype": "event",
            "name": "exited",
            "params": [
                {
                    "name": "location",
                    "description": "",
                    "type": "Entity"
                },
                {
                    "name": "locationType",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 56,
            "itemtype": "event",
            "name": "entered",
            "params": [
                {
                    "name": "location",
                    "description": "",
                    "type": "Entity"
                },
                {
                    "name": "locationType",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 68,
            "itemtype": "property",
            "name": "dictionary",
            "type": "Dictionary",
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 73,
            "description": "A list of noun-strings which describe the entity.",
            "itemtype": "property",
            "name": "nouns",
            "type": "Array",
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 79,
            "description": "A list of adjective strings which describe the entity.",
            "itemtype": "property",
            "name": "adjectives",
            "type": "Array",
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 85,
            "description": "A special array (see src/util/specarr.js) detailing proper nouns that\ncan be used to describe the Entity.",
            "itemtype": "property",
            "name": "properNouns",
            "type": "SpecialArray",
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 92,
            "description": "A list of sentences which are true in the present tense and have the entity\nas one of their arguments.",
            "itemtype": "property",
            "name": "facts",
            "type": "Array",
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 99,
            "description": "A list of sentences which are true in the past tense and have the entity as\none of their arguments.",
            "itemtype": "property",
            "name": "history",
            "type": "Array",
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 106,
            "description": "An object describing the preposition clauses which the entity can be\ndescribed with. The values of the object are SpecialArrays, indexed by\nthe preposition.",
            "itemtype": "property",
            "name": "prepositionClauses",
            "type": "Object",
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 116,
            "description": "A list of Sound objects which have the entity as an origin",
            "itemtype": "property",
            "name": "nowPlayingSounds",
            "type": "Array",
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 121,
            "itemtype": "property",
            "name": "soundPlayer",
            "type": "SoundPlayer",
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 127,
            "description": "Attach an adjective to the entity.",
            "itemtype": "method",
            "name": "be",
            "params": [
                {
                    "name": "adjective",
                    "description": "The adjective to attach",
                    "type": "String"
                },
                {
                    "name": "dictionary ",
                    "description": "",
                    "type": "Dictionary",
                    "optional": true,
                    "optdefault": " this.dictionary"
                }
            ],
            "chainable": 1,
            "throws": {
                "description": "In the case that the adjective is not in the dictionary.",
                "type": "String"
            },
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 153,
            "description": "Check whether a given adjective is attached to the entity",
            "itemtype": "method",
            "name": "is",
            "params": [
                {
                    "name": "adjective",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 163,
            "description": "Remove a given adjective from the entity.",
            "itemtype": "method",
            "name": "stopBeing",
            "params": [
                {
                    "name": "adj",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 177,
            "description": "Inherit properties from a given noun. This enables a non-hierachical\ninheritance structure for entities. The dictionary of nouns is defined in\n`src/nouns/index.js`.",
            "itemtype": "method",
            "name": "be_a",
            "params": [
                {
                    "name": "classname",
                    "description": "The noun to inherit properties from",
                    "type": "String"
                },
                {
                    "name": "dictionary ",
                    "description": "",
                    "type": "Dictionary",
                    "optional": true,
                    "optdefault": " this.dictionary"
                }
            ],
            "chainable": 1,
            "throws": {
                "description": "In the case that the noun-string is not in the dictionary.",
                "type": "String"
            },
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 218,
            "description": "Emitted whenever the entity becomes a new noun.",
            "itemtype": "event",
            "name": "becomeNoun",
            "params": [
                {
                    "name": "classname",
                    "description": "",
                    "type": "String"
                }
            ],
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 230,
            "description": "Check whether the entity inherits from a given noun.",
            "itemtype": "method",
            "name": "is_a",
            "params": [
                {
                    "name": "classname",
                    "description": "The noun to check.",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 240,
            "description": "Compiles a regex for all possible noun-phrase strings for the entity.",
            "itemtype": "method",
            "name": "reg",
            "params": [
                {
                    "name": "depth",
                    "description": "\n Limits the recursive depth for preposition phrases / embedded noun-phrases",
                    "type": "Number",
                    "optional": true,
                    "optdefault": "1"
                }
            ],
            "return": {
                "description": "",
                "type": "RegExp"
            },
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 278,
            "itemtype": "method",
            "name": "clauseRegex",
            "params": [
                {
                    "name": "depth",
                    "description": "Limits the recursive depth for embedded noun-phrases",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "A regular expression for any preposition phrase that can be included in\n a noun phrase for the entity. Or `null` if there are no prepositions\n clauses.",
                "type": "RegExp"
            },
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 301,
            "description": "Compile a regular expression for any adjective that can be used to\ndescribe this entity.",
            "itemtype": "method",
            "name": "adjRegex",
            "return": {
                "description": "",
                "type": "RegExp or Null"
            },
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 315,
            "description": "Test whether this entity matches a given noun-phrase string.",
            "itemtype": "method",
            "name": "matches",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 326,
            "description": "Randomly generate a noun-phrase that describes this entity",
            "itemtype": "method",
            "name": "ref",
            "deprecated": true,
            "deprecationMessage": "use .str() instead",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "DescriptionContext"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 339,
            "description": "Randomly generate a noun-phrase that describes this entity",
            "itemtype": "method",
            "name": "str",
            "params": [
                {
                    "name": "ctx",
                    "description": "",
                    "type": "DescriptionContext"
                },
                {
                    "name": "options",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 350,
            "description": "Attaches a preposition clause to the entity",
            "itemtype": "method",
            "name": "addClause",
            "params": [
                {
                    "name": "prep",
                    "description": "The preposition",
                    "type": "String"
                },
                {
                    "name": "clause",
                    "description": "The clause following the preposition."
                }
            ],
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 365,
            "description": "Remove a given preposition clause from the entity",
            "itemtype": "method",
            "name": "removeClause",
            "params": [
                {
                    "name": "prep",
                    "description": "The preposition",
                    "type": "String"
                },
                {
                    "name": "clause",
                    "description": "The clause following the preposition",
                    "type": "String, Substitution, Function or Entity"
                }
            ],
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 379,
            "description": "Choose a random sentence which is presently true has this entity as an\nargument.",
            "itemtype": "method",
            "name": "randomFact",
            "return": {
                "description": "",
                "type": "Sentence"
            },
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 389,
            "description": "Choose a random sentence which is true in the past-tense and has this entity\nas an argument.",
            "itemtype": "method",
            "name": "randomHistoricFact",
            "return": {
                "description": "",
                "type": "Sentence"
            },
            "class": "Entity"
        },
        {
            "file": "src/Entity.js",
            "line": 399,
            "description": "Choose a random sentence, true in the past or present tense, and has this\nentity as an argument.",
            "itemtype": "method",
            "name": "randomSentence",
            "return": {
                "description": "",
                "type": "Sentence"
            },
            "class": "Entity"
        },
        {
            "file": "src/FactListener.js",
            "line": 39,
            "description": "Adds a single entity member.",
            "itemtype": "method",
            "name": "add",
            "params": [
                {
                    "name": "entity",
                    "description": "The entity to be added.",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "",
                "type": "Null"
            },
            "class": "FactListener"
        },
        {
            "file": "src/FactListener.js",
            "line": 54,
            "description": "Removes a single entity member.",
            "itemtype": "method",
            "name": "remove",
            "params": [
                {
                    "name": "entity",
                    "description": "The entity to be added.",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "",
                "type": "Null"
            },
            "class": "FactListener"
        },
        {
            "file": "src/FactListener.js",
            "line": 72,
            "description": "Remove all entities members",
            "itemtype": "method",
            "name": "clear",
            "return": {
                "description": "",
                "type": "Null"
            },
            "class": "FactListener"
        },
        {
            "file": "src/NounPhraseSentence.js",
            "line": 23,
            "itemtype": "attribute",
            "name": "mainArgument",
            "readonly": "",
            "class": "NounPhraseSentence"
        },
        {
            "file": "src/Predicate.js",
            "line": 57,
            "description": "`skipIf` is called as when starting a sentence. If it returns a truthy\nvalue then the sentence will abort starting and won't happen. Should\ngenerally be used to check whether an action is unnecessary because its\noutcome is already true.",
            "itemtype": "property",
            "name": "skipIf",
            "type": "Function",
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 66,
            "description": "`_prepare` is called before a sentence happens. If it returns a sentence\nor list of sentences, these sentences will be executed consequetively\nbefore the original sentence happens.",
            "itemtype": "property",
            "name": "_prepare",
            "type": "Function",
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 74,
            "description": "`check` is called to decide whether it is necessary to call `_begin`.\n If it returns truthy then `_begin` will be skipped, the start process\n will not be cancelled however. Its secondary purpose is for answering\n question sentences (true/false) when they have not been specifically\n declared as sentences.",
            "itemtype": "property",
            "name": "check",
            "type": "Function",
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 84,
            "description": "`_begin` is called directly after the sentence happens. So far, the\nreturn value is ignored.",
            "itemtype": "property",
            "name": "_begin",
            "type": "Function",
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 91,
            "description": "`_expand` works in a similar way to `_prepare` except it is called\nimmediately after a sentence happens. If it returns a sentence, or an\narray of sentences, these will be executed consequetively and the main\nsentence will be stopped after the last one finishes.",
            "itemtype": "property",
            "name": "_expand",
            "type": "Function",
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 100,
            "description": "`until` is called immediately after a sentence happens (after\n`_expand`). It has an additional callback arguemnt (prepended) which,\nwhen called will stop the sentence.",
            "itemtype": "property",
            "name": "until",
            "type": "Function",
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 108,
            "description": "`_afterwards` is immediately after the sentence stops. If it returns a\nsentence or an array of sentences, these will be executed simultaneously",
            "itemtype": "property",
            "name": "_afterwards",
            "type": "Function",
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 115,
            "description": "If a predicate is marked banal, sentences using it will be ignored by\ncertain processes to do with story telling.",
            "itemtype": "property",
            "name": "banal",
            "type": "Boolean",
            "default": "false",
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 124,
            "description": "Checks whether a given list of arguments are of the right type to fit the\nparameters of a predicate.",
            "itemtype": "method",
            "name": "checkArgs",
            "params": [
                {
                    "name": "args",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 158,
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "str",
                    "description": "The String to parse",
                    "type": "String"
                },
                {
                    "name": "tenses",
                    "description": "List of tenses to parse the string against",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "A sentence with string placeholders as arguments or null (if cannot be\n  parsed)",
                "type": "Sentence"
            },
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 179,
            "description": "Parses a string using the imperative tense, for a given subject",
            "itemtype": "method",
            "name": "parseImperative",
            "params": [
                {
                    "name": "str",
                    "description": "The NL string to be parsed.",
                    "type": "String"
                },
                {
                    "name": "subject",
                    "description": "The subject of the sentence.",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "A sentence with string placeholders as arguments (except the subject)\n  or `null` in the case that the string cannot be parsed.",
                "type": "Sentence"
            },
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 201,
            "description": "Parses a string in noun phrase form, referring to one of the arguments.\nFor example, \"The cup that is on the table\".",
            "itemtype": "method",
            "name": "parseNounPhrase",
            "params": [
                {
                    "name": "str",
                    "description": "The string to be parsed",
                    "type": "String"
                }
            ],
            "return": {
                "description": "A sentence with string placeholders as arguments, or\n                       `null` in the case that the string cannot be parsed.",
                "type": "Sentence"
            },
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 221,
            "description": "Generate an english string version of the predicate for a given set of\narguments in a given tense.",
            "itemtype": "method",
            "name": "str",
            "params": [
                {
                    "name": "details",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "args",
                            "description": "The list of arguments for the sentence.",
                            "type": "Array"
                        },
                        {
                            "name": "tense",
                            "description": "\n The tense in which to compose the sentence. (see verbPhrase.js)",
                            "type": "String",
                            "optional": true,
                            "optdefault": " \"simple_present\""
                        },
                        {
                            "name": "form",
                            "description": "\n The index of the syntactic form to be used (for predicates with multiple\n forms)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": " 0"
                        }
                    ]
                },
                {
                    "name": "ctx",
                    "description": "\n An object describing the context for which the string is being generated.",
                    "type": "DescriptionContext",
                    "optional": true
                },
                {
                    "name": "options",
                    "description": "\n The entityStr options, dictating preferences for how entity arguments should\n be written.",
                    "type": "Object",
                    "optional": true
                }
            ],
            "return": {
                "description": "The written sentence.",
                "type": "String"
            },
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 244,
            "description": "Prepare an english version of the predicate for a given set of\narguments in a given tense.",
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "details",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "args",
                            "description": "The list of arguments for the sentence.",
                            "type": "Array"
                        },
                        {
                            "name": "tense",
                            "description": "\n The tense in which to compose the sentence. (see verbPhrase.js)",
                            "type": "String",
                            "optional": true,
                            "optdefault": " \"simple_present\""
                        },
                        {
                            "name": "form",
                            "description": "\n The index of the syntactic form to be used (for predicates with multiple\n forms)",
                            "type": "Number",
                            "optional": true,
                            "optdefault": " 0"
                        }
                    ]
                },
                {
                    "name": "verbPhraseOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "A substitution ready to format the sentence.",
                "type": "Substitution"
            },
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 268,
            "description": "Generate a set of preposition clauses for a particular argument.",
            "itemtype": "method",
            "name": "presentPrepositionClausesFor",
            "params": [
                {
                    "name": "argIndex",
                    "description": "The index of of the argument to generate clauses for.",
                    "type": "Number"
                },
                {
                    "name": "args",
                    "description": "The complete list of arguments.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of preposition (string) clause (substitution) pairs.",
                "type": "Array"
            },
            "class": "Predicate"
        },
        {
            "file": "src/Predicate.js",
            "line": 285,
            "description": "Generate a set of preposition clauses for a particular argument in the\npast tense.",
            "itemtype": "method",
            "name": "pastPrepositionClausesFor",
            "params": [
                {
                    "name": "argIndex",
                    "description": "The index of of the argument to generate clauses for.",
                    "type": "Number"
                },
                {
                    "name": "args",
                    "description": "The complete list of arguments.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of preposition (string) clause (substitution) pairs.",
                "type": "Array"
            },
            "class": "Predicate"
        },
        {
            "file": "src/PredicateSet.js",
            "line": 12,
            "description": "An array of predicates which are members of the set.",
            "itemtype": "property",
            "name": "predicates",
            "type": "Array",
            "class": "PredicateSet"
        },
        {
            "file": "src/PredicateSet.js",
            "line": 21,
            "description": "Adds predicates to the set.",
            "itemtype": "method",
            "name": "addPredicates",
            "params": [
                {
                    "name": "predicates",
                    "description": "The predicates to be added.",
                    "type": "Predicate",
                    "multiple": true
                }
            ],
            "class": "PredicateSet"
        },
        {
            "file": "src/PredicateSet.js",
            "line": 36,
            "description": "Parse a sentence string against all the predicates in the set.",
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "str",
                    "description": "The sentence string to parse",
                    "type": "String"
                },
                {
                    "name": "tenses",
                    "description": "An array of strings. The tenses to parse the stirng against.",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "An array of matches to the string as sentenses with\n placeholder-string arguments.",
                "type": "Array"
            },
            "class": "PredicateSet"
        },
        {
            "file": "src/PredicateSet.js",
            "line": 57,
            "description": "Parse a string in the imperative tense for a given subject. The subject\nwill be copied to the subject argument of the resultant sentences",
            "itemtype": "method",
            "name": "parseImperative",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "subject",
                    "description": "The subject, either a entity or a string.",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "An array sentence with placeholder-string arguments.",
                "type": "Array"
            },
            "class": "PredicateSet"
        },
        {
            "file": "src/PredicateSet.js",
            "line": 76,
            "description": "Parse a sentence-string in noun-phrase form. Eg/ \"the cup that is on the\ntable\".",
            "itemtype": "method",
            "name": "parseNounPhrase",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "An array of sentences with string-placeholder arguments",
                "type": "Array"
            },
            "class": "PredicateSet"
        },
        {
            "file": "src/PredicateSet.js",
            "line": 94,
            "itemtype": "method",
            "name": "random",
            "return": {
                "description": "A random predicate from the set.",
                "type": "Predicate"
            },
            "class": "PredicateSet"
        },
        {
            "file": "src/PredicateSet.js",
            "line": 102,
            "description": "Sorts predicates in descending order of 'specificness'.",
            "itemtype": "method",
            "name": "sortPredicates",
            "class": "PredicateSet"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 25,
            "itemtype": "property",
            "name": "verb",
            "type": "String",
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 29,
            "itemtype": "property",
            "name": "constants",
            "type": "Array",
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 34,
            "description": "The params assign the syntactic function of the arguments.",
            "itemtype": "property",
            "name": "params",
            "type": "Array",
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 59,
            "description": "The param objects indexed by name.",
            "itemtype": "property",
            "name": "paramsByName",
            "type": "Object",
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 66,
            "itemtype": "property",
            "name": "camelCaseName",
            "type": "String",
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 89,
            "description": "Convert an associated arguments object (indexed by param-name) into an\nordered argument list",
            "itemtype": "method",
            "name": "orderArgs",
            "params": [
                {
                    "name": "associativeArgs",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "Ordered args.",
                "type": "Array"
            },
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 103,
            "description": "Convert an ordered list of arguments into an associated arguments object\n(indexed by param-name).",
            "itemtype": "method",
            "name": "associateArgs",
            "params": [
                {
                    "name": "orderedArgs",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 117,
            "itemtype": "method",
            "name": "makeRegex",
            "params": [
                {
                    "name": "tense",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "options",
                    "description": "Options for verbPhrase",
                    "type": "Object"
                }
            ],
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 139,
            "itemtype": "method",
            "name": "makeParamRegexs",
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 155,
            "itemtype": "method",
            "name": "parse",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "tenses",
                    "description": "",
                    "type": "Array",
                    "optional": true
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 178,
            "itemtype": "method",
            "name": "parseImperative",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                },
                {
                    "name": "subject",
                    "description": "",
                    "type": "Entity"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 197,
            "itemtype": "method",
            "name": "parseNounPhrase",
            "params": [
                {
                    "name": "str",
                    "description": "",
                    "type": "String"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 219,
            "itemtype": "method",
            "name": "str",
            "params": [
                {
                    "name": "details",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "args",
                            "description": "",
                            "type": "Array"
                        },
                        {
                            "name": "tense",
                            "description": "",
                            "type": "String"
                        }
                    ]
                },
                {
                    "name": "ctx",
                    "description": "",
                    "type": "DescriptionContext"
                },
                {
                    "name": "options",
                    "description": "entityStr options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 232,
            "itemtype": "method",
            "name": "compose",
            "params": [
                {
                    "name": "details",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "args",
                            "description": "",
                            "type": "Array"
                        }
                    ]
                },
                {
                    "name": "tense ",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": " \"simple_present\""
                },
                {
                    "name": "options",
                    "description": "verbPhrase options",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "Substitution"
            },
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 245,
            "itemtype": "method",
            "name": "composeAction",
            "params": [
                {
                    "name": "orderedArgs",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 258,
            "itemtype": "method",
            "name": "composeSubjectNounPhrase",
            "params": [
                {
                    "name": "details",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "args",
                            "description": "",
                            "type": "Array"
                        },
                        {
                            "name": "tense",
                            "description": "",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Substitution"
            },
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 269,
            "itemtype": "method",
            "name": "composePrepositionPhraseFor",
            "params": [
                {
                    "name": "argIndex",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "details",
                    "description": "",
                    "type": "Object",
                    "props": [
                        {
                            "name": "args",
                            "description": "",
                            "type": "Array"
                        },
                        {
                            "name": "tense",
                            "description": "",
                            "type": "String"
                        }
                    ]
                }
            ],
            "return": {
                "description": "",
                "type": "Object"
            },
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 288,
            "itemtype": "method",
            "name": "presentPrepositionClausesFor",
            "params": [
                {
                    "name": "argIndex",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 303,
            "itemtype": "method",
            "name": "pastPrepositionClausesFor",
            "params": [
                {
                    "name": "argIndex",
                    "description": "",
                    "type": "Number"
                },
                {
                    "name": "args",
                    "description": "",
                    "type": "Array"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "PredicateSyntax"
        },
        {
            "file": "src/PredicateSyntax.js",
            "line": 318,
            "description": "Calculate a specificness score. Used to order predicates in PredicateSet.\nLow specificness should be processed last when parsing to avoid using\nproblems.\nEg to avoid using '_ is _' when '_ is in _' could have been used.",
            "itemtype": "method",
            "name": "getSpecificness",
            "return": {
                "description": "",
                "type": "Number"
            },
            "class": "PredicateSyntax"
        },
        {
            "file": "src/Sentence.js",
            "line": 17,
            "description": "arguments",
            "itemtype": "property",
            "name": "predicate",
            "type": "Predicate",
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 23,
            "description": "an array of Entity/String arguments",
            "itemtype": "property",
            "name": "args",
            "type": "Array",
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 29,
            "description": "The truth value of the sentnece. May be `'true'`, `'planned'`,\n`'false'`, `'past'`, `'hypothetical'` or `'superfluous'`",
            "itemtype": "property",
            "name": "truthValue",
            "type": "String",
            "default": "\"hypothetical\"",
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 37,
            "description": "a list keeping track of all currently active clause objects",
            "itemtype": "property",
            "name": "presentClauses",
            "type": "Array",
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 42,
            "description": "a list keeping track of all past tense clause objects",
            "itemtype": "property",
            "name": "pastClauses",
            "type": "Array",
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 49,
            "description": "Check to see if the arguments are compatible with the predicate in\nterms of their type.",
            "itemtype": "method",
            "name": "checkArgs",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 59,
            "description": "If this sentence already exists in the arguments' fact lists return\nthe already existing version. Otherwise false.",
            "itemtype": "method",
            "name": "trueInPresent",
            "return": {
                "description": "",
                "type": "Sentence or Boolean"
            },
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 85,
            "description": "Check whether the sentence was true in the past.",
            "itemtype": "method",
            "name": "trueInPast",
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 100,
            "description": "Get a list of all arguments which are entities, including those from\nembedded sub-sentences.",
            "itemtype": "attribute",
            "name": "recursiveEntityArgs",
            "readonly": "",
            "type": "{Array}",
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 118,
            "description": "Attach facts and preposition clauses to the Entity arguments.",
            "itemtype": "method",
            "name": "addFactsAndClauses",
            "return": {
                "description": "",
                "type": "Null"
            },
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 144,
            "description": "Starts a sentence.",
            "itemtype": "method",
            "name": "start",
            "return": {
                "description": "Sentence or SentenceQueue (if postponed by prepare)"
            },
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 197,
            "description": "Emitted when there is a predicate defined problem starting\nthe sentence.",
            "itemtype": "event",
            "name": "problem",
            "params": [
                {
                    "name": "failureReason",
                    "description": ""
                }
            ],
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 257,
            "description": "Emitted when a sentence successfully starts",
            "itemtype": "event",
            "name": "start",
            "deprecated": true,
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 269,
            "description": "Stops the sentence.",
            "itemtype": "method",
            "name": "stop",
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 323,
            "description": "Emitted when the sentence has successfully stopped.",
            "itemtype": "event",
            "name": "stop",
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 332,
            "description": "Called when the sentence becomes past-tense",
            "itemtype": "method",
            "name": "observePast",
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 359,
            "description": "Generate a string version of the sentence.",
            "itemtype": "method",
            "name": "str",
            "params": [
                {
                    "name": "tense ",
                    "description": "",
                    "type": "String",
                    "optional": true,
                    "optdefault": " \"simple_present\""
                },
                {
                    "name": "ctx",
                    "description": "",
                    "type": "DescriptionContext"
                },
                {
                    "name": "entityStrOptions",
                    "description": "",
                    "type": "Object"
                }
            ],
            "return": {
                "description": "",
                "type": "String"
            },
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 374,
            "description": "Check equality of two sentences",
            "itemtype": "method",
            "name": "compare",
            "static": 1,
            "params": [
                {
                    "name": "P",
                    "description": "",
                    "type": "Sentence"
                },
                {
                    "name": "Q",
                    "description": "",
                    "type": "Sentence"
                }
            ],
            "return": {
                "description": "",
                "type": "Boolean"
            },
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 404,
            "description": "Quick constructor for sentence objects.",
            "itemtype": "method",
            "name": "S",
            "static": 1,
            "params": [
                {
                    "name": "predicate",
                    "description": "The predicate or a camel case name referencing a the predicate.",
                    "type": "Predicate/String"
                },
                {
                    "name": "args",
                    "description": "The arguments.",
                    "type": "Entity/String",
                    "multiple": true
                }
            ],
            "return": {
                "description": "",
                "type": "Sentence"
            },
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 423,
            "itemtype": "attribute",
            "name": "entityArgs",
            "readonly": "",
            "type": "{Array}",
            "class": "Sentence"
        },
        {
            "file": "src/Sentence.js",
            "line": 432,
            "itemtype": "method",
            "name": "randomEntityArg",
            "return": {
                "description": "",
                "type": "Entity"
            },
            "class": "Sentence"
        },
        {
            "file": "src/SentenceQueue.js",
            "line": 16,
            "itemtype": "property",
            "name": "sentence",
            "type": "Array",
            "class": "SentenceQueue"
        },
        {
            "file": "src/SentenceQueue.js",
            "line": 20,
            "description": "Index of the next sentence to start.",
            "itemtype": "property",
            "name": "i",
            "type": "Number",
            "class": "SentenceQueue"
        },
        {
            "file": "src/SentenceQueue.js",
            "line": 30,
            "description": "Adds a sentence to the end of the queue.",
            "itemtype": "method",
            "name": "appendSentence",
            "params": [
                {
                    "name": "sentence",
                    "description": "",
                    "type": "Sentence"
                }
            ],
            "class": "SentenceQueue"
        },
        {
            "file": "src/SentenceQueue.js",
            "line": 43,
            "description": "Begin processing the queue.",
            "itemtype": "method",
            "name": "start",
            "class": "SentenceQueue"
        },
        {
            "file": "src/SentenceQueue.js",
            "line": 48,
            "itemtype": "event",
            "name": "start",
            "class": "SentenceQueue"
        },
        {
            "file": "src/SentenceQueue.js",
            "line": 55,
            "description": "Start the next sentence in the queue and increment `i`, or emit `stop` (if\nreached the end).",
            "itemtype": "method",
            "name": "startNextSentence",
            "class": "SentenceQueue"
        },
        {
            "file": "src/SentenceQueue.js",
            "line": 91,
            "itemtype": "event",
            "name": "stop",
            "class": "SentenceQueue"
        },
        {
            "file": "src/WanderingDescriber.js",
            "line": 17,
            "itemtype": "method",
            "name": "log",
            "params": [
                {
                    "name": "args",
                    "description": "",
                    "type": "Sentence|Entity",
                    "multiple": true
                }
            ],
            "class": "WanderingDescriber"
        },
        {
            "file": "src/WanderingDescriber.js",
            "line": 40,
            "itemtype": "method",
            "name": "next",
            "return": {
                "description": "",
                "type": "Sentence|null"
            },
            "class": "WanderingDescriber"
        },
        {
            "file": "src/WanderingDescriber.js",
            "line": 56,
            "itemtype": "method",
            "name": "nextFew",
            "params": [
                {
                    "name": "howMany",
                    "description": "",
                    "type": "Number"
                }
            ],
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "WanderingDescriber"
        },
        {
            "file": "src/WanderingDescriber.js",
            "line": 76,
            "itemtype": "method",
            "name": "allFactsShuffled",
            "return": {
                "description": "",
                "type": "Array"
            },
            "class": "WanderingDescriber"
        },
        {
            "file": "src/spawn2.js",
            "line": 1,
            "class": "",
            "module": "entity-game"
        },
        {
            "file": "src/spawn2.js",
            "line": 6,
            "description": "Create new entities from noun-phrase-strings.",
            "itemtype": "method",
            "name": "spawn",
            "params": [
                {
                    "name": "dictionary",
                    "description": "",
                    "type": "Dictionary"
                },
                {
                    "name": "strs",
                    "description": "Noun strings",
                    "type": "String",
                    "optional": true,
                    "multiple": true
                }
            ],
            "return": {
                "description": "An array of entities",
                "type": "Array"
            },
            "throws": {
                "description": "If unable to parse one of the arguments."
            },
            "class": "",
            "module": "entity-game"
        }
    ],
    "warnings": [
        {
            "message": "Missing item type",
            "line": " src/spawn2.js:1"
        }
    ]
}